/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InventoryService } from "../inventory.service";
import { InventoryCreateInput } from "./InventoryCreateInput";
import { Inventory } from "./Inventory";
import { InventoryFindManyArgs } from "./InventoryFindManyArgs";
import { InventoryWhereUniqueInput } from "./InventoryWhereUniqueInput";
import { InventoryUpdateInput } from "./InventoryUpdateInput";
import { RentalFindManyArgs } from "../../rental/base/RentalFindManyArgs";
import { Rental } from "../../rental/base/Rental";
import { RentalWhereUniqueInput } from "../../rental/base/RentalWhereUniqueInput";

export class InventoryControllerBase {
  constructor(protected readonly service: InventoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Inventory })
  async createInventory(
    @common.Body() data: InventoryCreateInput
  ): Promise<Inventory> {
    return await this.service.createInventory({
      data: data,
      select: {
        available: true,
        createdAt: true,
        id: true,
        name: true,
        pricePerDay: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Inventory] })
  @ApiNestedQuery(InventoryFindManyArgs)
  async inventories(@common.Req() request: Request): Promise<Inventory[]> {
    const args = plainToClass(InventoryFindManyArgs, request.query);
    return this.service.inventories({
      ...args,
      select: {
        available: true,
        createdAt: true,
        id: true,
        name: true,
        pricePerDay: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Inventory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inventory(
    @common.Param() params: InventoryWhereUniqueInput
  ): Promise<Inventory | null> {
    const result = await this.service.inventory({
      where: params,
      select: {
        available: true,
        createdAt: true,
        id: true,
        name: true,
        pricePerDay: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Inventory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInventory(
    @common.Param() params: InventoryWhereUniqueInput,
    @common.Body() data: InventoryUpdateInput
  ): Promise<Inventory | null> {
    try {
      return await this.service.updateInventory({
        where: params,
        data: data,
        select: {
          available: true,
          createdAt: true,
          id: true,
          name: true,
          pricePerDay: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Inventory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInventory(
    @common.Param() params: InventoryWhereUniqueInput
  ): Promise<Inventory | null> {
    try {
      return await this.service.deleteInventory({
        where: params,
        select: {
          available: true,
          createdAt: true,
          id: true,
          name: true,
          pricePerDay: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rentals")
  @ApiNestedQuery(RentalFindManyArgs)
  async findRentals(
    @common.Req() request: Request,
    @common.Param() params: InventoryWhereUniqueInput
  ): Promise<Rental[]> {
    const query = plainToClass(RentalFindManyArgs, request.query);
    const results = await this.service.findRentals(params.id, {
      ...query,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,

        inventory: {
          select: {
            id: true,
          },
        },

        startDate: true,
        totalPrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rentals")
  async connectRentals(
    @common.Param() params: InventoryWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        connect: body,
      },
    };
    await this.service.updateInventory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rentals")
  async updateRentals(
    @common.Param() params: InventoryWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        set: body,
      },
    };
    await this.service.updateInventory({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rentals")
  async disconnectRentals(
    @common.Param() params: InventoryWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        disconnect: body,
      },
    };
    await this.service.updateInventory({
      where: params,
      data,
      select: { id: true },
    });
  }
}
